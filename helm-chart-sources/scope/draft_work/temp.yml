---
# Source: scope/templates/deployment.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: scopetemplate-webhook-cert-sa
  labels:
    helm.sh/chart: scope-1.3.1
    app.kubernetes.io/name: scope
    app.kubernetes.io/instance: scopetemplate
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: scope/templates/deployment.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: scopetemplate-cert-sa
  labels:
    helm.sh/chart: scope-1.3.1
    app.kubernetes.io/name: scope
    app.kubernetes.io/instance: scopetemplate
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
---
# Source: scope/templates/scope.yaml
apiVersion: v1
kind: Service
metadata:
  name: scopetemplate-scope
  labels:
    helm.sh/chart: scope-1.3.1
    app.kubernetes.io/name: scope
    app.kubernetes.io/instance: scopetemplate
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  selector:
    app: scope
    app.kubernetes.io/name: scope
    app.kubernetes.io/instance: scopetemplate
  ports:
  - name: 4443-tcp
    port: 443
    protocol: TCP
    targetPort: 4443---
apiVersion: v1
kind: ConfigMap
metadata:
  name: scopetemplate-scope
  labels:
    helm.sh/chart: scope-1.3.1
    app.kubernetes.io/name: scope
    app.kubernetes.io/instance: scopetemplate
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
data:
  scope.yml: |
    cribl:
      authtoken: ""
      enable: true
      transport:
        host: "cribl-internal"
        port: "10090"
        tls:
          cacertpath: ""
          enable: false
          validateserver: true
        type: "tcp"
    event:
      enable: true
      format:
        type: "ndjson"
      watch: 
        - name: (\/logs?\/)|(\.log$)|(\.log[.\d])
          type: file
          value: .*
        - allowbinary: false
          name: (stdout|stderr)
          type: console
          value: .*
        - field: .*
          name: .*
          type: net
          value: .*
        - field: .*
          name: .*
          type: fs
          value: .*
        - field: .*
          name: .*
          type: dns
          value: .*
        - field: .*
          name: .*
          type: http
          value: .*
    libscope:
      commanddir: "/scope/cmd"
      configevent: true
      log:
        level: "warning"
        transport:
          buffering: "line"
          path: "/scope/libscope.log"
          tls:
            cacertpath: ""
            enable: false
            validateserver: false
          type: "file"
      snapshot:
        backtrace: false
        coredump: false
      summaryperiod: 10
    metric:
      enable: true
      format:
        type: "ndjson"
        verbosity: 4
      watch: 
        - type: fs
        - type: net
        - type: http
        - type: dns
        - type: process
        - type: statsd
---
# Source: scope/templates/cluster-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: scopetemplate-cluster-role
  labels:
    helm.sh/chart: scope-1.3.1
    app.kubernetes.io/name: scope
    app.kubernetes.io/instance: scopetemplate
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - ""
  resourceNames:
  - scope
  resources:
  - configmaps
  verbs:
  - get
  - patch
  - put
  - update
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
---
# Source: scope/templates/webhook-cert-cluster-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: scopetemplate-webhook-cert-cluster-role
  labels:
    helm.sh/chart: scope-1.3.1
    app.kubernetes.io/name: scope
    app.kubernetes.io/instance: scopetemplate
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - mutatingwebhookconfigurations
  verbs:
  - get
  - create
  - patch
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests
  verbs:
  - create
  - get
  - delete
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests/approval
  verbs:
  - update
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - get
  - patch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
- apiGroups:
  - certificates.k8s.io
  resourceNames:
  - kubernetes.io/kubelet-serving
  resources:
  - signers
  verbs:
  - approve
---
# Source: scope/templates/cluster-role-binding-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: scopetemplate-cluster-role-binding
  labels:
    helm.sh/chart: scope-1.3.1
    app.kubernetes.io/name: scope
    app.kubernetes.io/instance: scopetemplate
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: 'scopetemplate-cluster-role'
subjects:
- kind: ServiceAccount
  name: 'scopetemplate-cert-sa'
  namespace: 'default'
---
# Source: scope/templates/webhook-cert-cluster-role-binding-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: scopetemplate-webhook-cert-cluster-role-binding
  labels:
    helm.sh/chart: scope-1.3.1
    app.kubernetes.io/name: scope
    app.kubernetes.io/instance: scopetemplate
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: 'scopetemplate-webhook-cert-cluster-role'
subjects:
- kind: ServiceAccount
  name: 'scopetemplate-webhook-cert-sa'
  namespace: 'default'
---
# Source: scope/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scopetemplate-scope
  labels:
    app: scope
    helm.sh/chart: scope-1.3.1
    app.kubernetes.io/name: scope
    app.kubernetes.io/instance: scopetemplate
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app: scope
      app.kubernetes.io/name: scope
      app.kubernetes.io/instance: scopetemplate
  template:
    metadata:
      labels:
        app: scope
        app.kubernetes.io/name: scope
        app.kubernetes.io/instance: scopetemplate
    spec:
      containers:
      - args:
        - -c
        - /usr/local/bin/scope k8s --server --cribldest tcp://cribl-internal:10090 || sleep
          1000
        command:
        - /bin/bash
        env:
        - name: KUBERNETES_CLUSTER_DOMAIN
          value: "cluster.local"
        image: mbiesekcribl/scope:1.3.1
        imagePullPolicy: IfNotPresent
        name: scope
        ports:
        - containerPort: 4443
          protocol: TCP
        resources: {}
        volumeMounts:
        - mountPath: /etc/certs
          name: certs
          readOnly: true
      serviceAccountName: scopetemplate-cert-sa
      volumes:
      - name: certs
        secret:
          secretName: scope-secret
---
# Source: scope/templates/webhook-cert-setup.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: scopetemplate-webhook-cert-setup
  labels:
    helm.sh/chart: scope-1.3.1
    app.kubernetes.io/name: scope
    app.kubernetes.io/instance: scopetemplate
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
spec:
  backoffLimit: 3
  template:
    spec:
      containers:
      - args:
        - --service
        - scope
        - --webhook
        - scope.default.appscope.io
        - --secret
        - scope-secret
        - --namespace
        - default
        command:
        - ./generate_certificate.sh
        image: mbiesekcribl/k8s-webhook-cert-manager:latest
        name: webhook-cert-setup
      restartPolicy: OnFailure
      serviceAccountName: webhook-cert-sa
---
# Source: scope/templates/default.appscope.io.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: scopetemplate-default.appscope.io
  annotations:
    cert-manager.io/inject-ca-from: default/scopetemplate-
  labels:
    helm.sh/chart: scope-1.3.1
    app.kubernetes.io/name: scope
    app.kubernetes.io/instance: scopetemplate
    app.kubernetes.io/version: "1.3.1"
    app.kubernetes.io/managed-by: Helm
webhooks:
- admissionReviewVersions:
  - v1
  - v1beta1
  clientConfig:
    service:
      name: 'scopetemplate-scope'
      namespace: 'default'
      path: /mutate
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: scope.default.appscope.io
  namespaceSelector:
    matchLabels:
      scope: enabled
  rules:
  - apiGroups:
    - ""
    apiVersions:
    - v1
    operations:
    - CREATE
    resources:
    - pods
    scope: '*'
  sideEffects: None
